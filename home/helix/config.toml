theme = "mellow"

[editor]
line-number = "relative"
mouse = false
cursorline = true
auto-format = true
rulers = [80, 120]

[editor.statusline]
left = ["mode", "spinner", "file-name", "file-modification-indicator"]
center = ["version-control"]
right = ["diagnostics", "selections", "position", "position-percentage", "file-encoding", "file-line-ending", "file-type"]
separator = "│"
mode.normal = "NOR"
mode.insert = "INS"
mode.select = "SEL"

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.file-picker]
hidden = false

[editor.lsp]
display-inlay-hints = true


############################################################################

# I am a (Neo)Vim user. Today, for the millionth time, i updated my plugins
# and was met with a sea of criminally useless error messages. I have things
# to do. I don't have time to search the GitHub issues of arcane plugins
# maintained by people whose approach to breaking changes is... well, a
# little too cavalier for my tastes.

# I recall a friend or a colleague sending me a link to the Helix editor a 
# while ago. It looked pretty cool, right?

# "But what about the plugins?" I thought. Hmm... Plugins. Those plugins that 
# break my barely recognizable init.lua with depressing regularity. Breaking
# changes in NeoVim plugins don't care about my init.lua.

# Yes... Those plugins that I shouldn't even need to install to have a 
# functional editor.

# Plugins be damned!

# My sweaty hands fumble on my obnoxiously loud mechanical keyboard with 
# the alt + hjkl keys to focus my open terminal emulator with my tiling 
# window manager. alacritty. I'm thrown back briefly to a memory of the
# countless hours spent trying to get my terminal and Neo(Vim)
# colourschemes to match.

# I install the latest binary release of Helix available on my package 
# manager of choice and cd into the directory I was about to start working 
# in before my Neo(Vim) configuration was drowned in a flood of red.

# hx

# I tentatively press the space bar and try out the file picker. Fuzzy 
# search. Syntax highlighting. Nice. Naturally, the directory I am in hosts 
# a Rust project. I select one of the numerous lib.rs files which serve as 
# the entry points to the Cargo workspace crates that I split my monolith 
# out into in hope of improving my incremental compilation times on my 
# aging laptop. I hear rust-analyzer begin to impose its will on my aging
# Intel CPU.

# Wait a minute... My eyes dart around the screen. There are no errors. 
# The syntax highlighting looks right. I try to navigate through the file 
# using {}, but it's not working. Hmm, that can be figured out later. I 
# use the mouse to bring the cursor to an invocation of a declarative 
# macro_rules! macro. I press g and am met with a host of LSP-powered 
# options. I didn't even install an LSP plugin! I press k and a pop-up 
# appears with the documentation for the macro.

# This is how life should always be. I resolve to make the switch to Helix.

# ... And not long after, I give up. My Vim muscle-memory is too strong. 
# The Verb-Modifier-Object structure of Vim commands has become the language 
# that my brain uses to send instructions to my fingers. Defeated, the 
# references to hx in my .zsh_history become fewer and far between, until 
# they disappear completely, replaced once again by vim, nvim or nvim 
# aliased to vim.

# I dismiss the red error messages screaming at me every time I open the 
# editor. Maybe I keep an instance of it running after I've dismissed all 
# the errors so that I don't have to go through the humiliation of dismissing 
# errors that I don't have the time, energy, or motivation to fix every time 
# I want to edit a file.

# Maybe one day, I think, it will be possible to use Helix in "Vim mode", 
# after all, there is even a pretty decent Vim plugin for VSCode these days, 
# right?

# I've been through the frustration, the anger, the sorrow, the 
# disappointment, and the defeat.

# But then, LGUG2Z stepped in. They've done the work—the hard work—to give me 
# something better. I might not have found the perfect solution on my own, but 
# thanks to them, I now have more than enough to get the ball rolling!


# MAKE HELIX VIM-like see: https://github.com/LGUG2Z/helix-vim

[keys.normal]
# Quick iteration on config changes
C-o = ":config-open"
C-r = ":config-reload"

# Some nice Helix stuff
C-h = "select_prev_sibling"
C-j = "shrink_selection"
C-k = "expand_selection"
C-l = "select_next_sibling"

# Personal preference
o = ["open_below", "normal_mode"]
O = ["open_above", "normal_mode"]

# Muscle memory
"{" = ["goto_prev_paragraph", "collapse_selection"]
"}" = ["goto_next_paragraph", "collapse_selection"]
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
"%" = "match_brackets"
V = ["select_mode", "extend_to_line_bounds"]
C = ["extend_to_line_end", "yank_main_selection_to_clipboard", "delete_selection", "insert_mode"]
D = ["extend_to_line_end", "yank_main_selection_to_clipboard", "delete_selection"]
S = "surround_add" # Would be nice to be able to do something after this but it isn't chainable

# Clipboards over registers ye ye
x = "delete_selection"
p = ["paste_clipboard_after", "collapse_selection"]
P = ["paste_clipboard_before", "collapse_selection"]
# Would be nice to add ya and yi, but the surround commands can't be chained
Y = ["extend_to_line_end", "yank_main_selection_to_clipboard", "collapse_selection"]

# Uncanny valley stuff, this makes w and b behave as they do Vim
w = ["move_next_word_start", "move_char_right", "collapse_selection"]
W = ["move_next_long_word_start", "move_char_right", "collapse_selection"]
e = ["move_next_word_end", "collapse_selection"]
E = ["move_next_long_word_end", "collapse_selection"]
b = ["move_prev_word_start", "collapse_selection"]
B = ["move_prev_long_word_start", "collapse_selection"]

# If you want to keep the selection-while-moving behaviour of Helix, this two lines will help a lot,
# especially if you find having text remain selected while you have switched to insert or append mode
#
# There is no real difference if you have overridden the commands bound to 'w', 'e' and 'b' like above
# But if you really want to get familiar with the Helix way of selecting-while-moving, comment the
# bindings for 'w', 'e', and 'b' out and leave the bindings for 'i' and 'a' active below. A world of difference!
i = ["insert_mode", "collapse_selection"]
a = ["append_mode", "collapse_selection"]

# Undoing the 'd' + motion commands restores the selection which is annoying
u = ["undo", "collapse_selection"]

# Escape the madness! No more fighting with the cursor! Or with multiple cursors!
esc = ["collapse_selection", "keep_primary_selection"]

# Search for word under cursor
"*" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection", "search_next"]
"#" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection", "search_prev"]

# Make j and k behave as they do Vim when soft-wrap is enabled
j = "move_line_down"
k = "move_line_up"

# Extend and select commands that expect a manual input can't be chained
# I've kept d[X] commands here because it's better to at least have the stuff you want to delete
# selected so that it's just a keystroke away to delete
[keys.normal.d]
d = ["extend_to_line_bounds", "yank_main_selection_to_clipboard", "delete_selection"]
t = ["extend_till_char"]
s = ["surround_delete"]
i = ["select_textobject_inner"]
a = ["select_textobject_around"]
j = ["select_mode", "extend_to_line_bounds", "extend_line_below", "yank_main_selection_to_clipboard", "delete_selection", "normal_mode"]
down = ["select_mode", "extend_to_line_bounds", "extend_line_below", "yank_main_selection_to_clipboard", "delete_selection", "normal_mode"]
k = ["select_mode", "extend_to_line_bounds", "extend_line_above", "yank_main_selection_to_clipboard", "delete_selection", "normal_mode"]
up = ["select_mode", "extend_to_line_bounds", "extend_line_above", "yank_main_selection_to_clipboard", "delete_selection", "normal_mode"]
G = ["select_mode", "extend_to_line_bounds", "goto_last_line", "extend_to_line_bounds", "yank_main_selection_to_clipboard", "delete_selection", "normal_mode"]
w = ["move_next_word_start", "yank_main_selection_to_clipboard", "delete_selection"]
W = ["move_next_long_word_start", "yank_main_selection_to_clipboard", "delete_selection"]
g = { g = ["select_mode", "extend_to_line_bounds", "goto_file_start", "extend_to_line_bounds", "yank_main_selection_to_clipboard", "delete_selection", "normal_mode"] }

[keys.normal.y]
y = ["extend_to_line_bounds", "yank_main_selection_to_clipboard", "normal_mode", "collapse_selection"]
j = ["select_mode", "extend_to_line_bounds", "extend_line_below", "yank_main_selection_to_clipboard", "collapse_selection", "normal_mode"]
down = ["select_mode", "extend_to_line_bounds", "extend_line_below", "yank_main_selection_to_clipboard", "collapse_selection", "normal_mode"]
k = ["select_mode", "extend_to_line_bounds", "extend_line_above", "yank_main_selection_to_clipboard", "collapse_selection", "normal_mode"]
up = ["select_mode", "extend_to_line_bounds", "extend_line_above", "yank_main_selection_to_clipboard", "collapse_selection", "normal_mode"]
G = ["select_mode", "extend_to_line_bounds", "goto_last_line", "extend_to_line_bounds", "yank_main_selection_to_clipboard", "collapse_selection", "normal_mode"]
w = ["move_next_word_start", "yank_main_selection_to_clipboard", "collapse_selection", "normal_mode"]
W = ["move_next_long_word_start", "yank_main_selection_to_clipboard", "collapse_selection", "normal_mode"]
g = { g = ["select_mode", "extend_to_line_bounds", "goto_file_start", "extend_to_line_bounds", "yank_main_selection_to_clipboard", "collapse_selection", "normal_mode"] }

[keys.insert]
# Escape the madness! No more fighting with the cursor! Or with multiple cursors!
esc = ["collapse_selection", "normal_mode"]

[keys.select]
# Muscle memory
"{" = ["extend_to_line_bounds", "goto_prev_paragraph"]
"}" = ["extend_to_line_bounds", "goto_next_paragraph"]
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
D = ["extend_to_line_bounds", "delete_selection", "normal_mode"]
C = ["goto_line_start", "extend_to_line_bounds", "change_selection"]
"%" = "match_brackets"
S = "surround_add" # Basically 99% of what I use vim-surround for
u = ["switch_to_lowercase", "collapse_selection", "normal_mode"]
U = ["switch_to_uppercase", "collapse_selection", "normal_mode"]

# Visual-mode specific muscle memory
i = "select_textobject_inner"
a = "select_textobject_around"

# Some extra binds to allow us to insert/append in select mode because it's nice with multiple cursors
tab = ["insert_mode", "collapse_selection"] # tab is read by most terminal editors as "C-i"
C-a = ["append_mode", "collapse_selection"]

# Make selecting lines in visual mode behave sensibly
k = ["extend_line_up", "extend_to_line_bounds"]
j = ["extend_line_down", "extend_to_line_bounds"]

# Clipboards over registers ye ye
d = ["yank_main_selection_to_clipboard", "delete_selection"]
x = ["yank_main_selection_to_clipboard", "delete_selection"]
y = ["yank_main_selection_to_clipboard", "normal_mode", "flip_selections", "collapse_selection"]
Y = ["extend_to_line_bounds", "yank_main_selection_to_clipboard", "goto_line_start", "collapse_selection", "normal_mode"]
p = "replace_selections_with_clipboard" # No life without this
P = "paste_clipboard_before"

# Escape the madness! No more fighting with the cursor! Or with multiple cursors!
esc = ["collapse_selection", "keep_primary_selection", "normal_mode"]
